language: cpp
os: linux
dist: xenial

matrix:
  include:
    - env: CXX_COMPILER=clang++-6.0 CXX=g++-8
      addons:
        apt:
          packages:
            - clang-6.0
            - g++-8
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
            - sourceline: 'deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-6.0 main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'

    - env: CXX_COMPILER=clang++-7 CXX=g++-8
      addons:
        apt:
          packages:
            - clang-7
            - g++-8
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
            - sourceline: 'deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-7 main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'

    - env: CXX_COMPILER=clang++-8 CXX=g++-8
      addons:
        apt:
          packages:
            - clang-8
            - g++-8
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
            - sourceline: 'deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-8 main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'

    - env: CXX_COMPILER=clang++-9 CXX=g++-8
      addons:
        apt:
          packages:
            - clang-9
            - g++-8
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
            - sourceline: 'deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'

    - env: CXX_COMPILER=clang++-9 STDLIB=libc++
      addons:
        apt:
          packages:
            - clang-9
            - libc++-9-dev
            - libc++abi-9-dev
          sources:
            - sourceline: 'deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'

    - env: CXX_COMPILER=g++-7 CXX=g++-7 CODE_COVERAGE=true
      addons:
        apt:
          packages:
            - g++-7
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'

    - env: CXX_COMPILER=g++-8 CXX=g++-8
      addons:
        apt:
          packages:
            - g++-8
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'

    - env: CXX_COMPILER=g++-latest CXX=g++-latest

install:

################################################################################
# Third party dependencies are installed in ${TRAVIS_BUILD_DIR}/../third_party
################################################################################
- |
  THIRD_PARTY_DIR="${TRAVIS_BUILD_DIR}/../third_party"
  mkdir -p ${THIRD_PARTY_DIR}

################################################################################
# Install the latest gcc
################################################################################

- |
  if [[ "${CXX_COMPILER}" == "g++-latest" ]]; then
    wget http://kayari.org/gcc-latest_9.0.1-20190310svn269561.deb
    sudo dpkg -i gcc-latest_9.0.1-20190310svn269561.deb
    sudo ln -s /opt/gcc-latest/bin/gcc /usr/bin/gcc-latest
    sudo ln -s /opt/gcc-latest/bin/g++ /usr/bin/g++-latest
    sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-latest 90 --slave /usr/bin/g++ g++ /usr/bin/g++-latest
    sudo ldconfig /opt/gcc-latest/lib64
  fi

################################################################################
# Install the latest Boost and build Boost.Test (compiled with g++-8)
################################################################################
- |
  BOOST_VERSION=1.69.0
  BOOST_DIR=${THIRD_PARTY_DIR}/boost-${BOOST_VERSION}
  BOOST_URL="https://dl.bintray.com/boostorg/release/${BOOST_VERSION}/source/boost_${BOOST_VERSION//\./_}.tar.bz2"
  BOOST_LIBS="test"
  BOOST_BUILD_TYPE="link=static variant=release"
  mkdir -p ${BOOST_DIR} && travis_retry wget --quiet -O - ${BOOST_URL} | tar --strip-components=1 -xj -C ${BOOST_DIR}
  cd ${BOOST_DIR}
  if [[ "${STDLIB}" == "libc++" ]]; then
    sudo update-alternatives --install /usr/bin/clang   clang   /usr/bin/clang-9   90
    sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-9 90
    ./bootstrap.sh --with-toolset=clang --with-libraries=${BOOST_LIBS}
    sudo ./b2 -d0 -j10 install toolset=clang ${BOOST_BUILD_TYPE} cxxflags="-stdlib=libc++"
  else
    ./bootstrap.sh --with-toolset=gcc   --with-libraries=${BOOST_LIBS}
    sudo ./b2 -d0 -j10 install toolset=gcc   ${BOOST_BUILD_TYPE}
  fi

################################################################################
# Install the latest CMake
################################################################################
- |
  CMAKE_VERSION=3.14.0
  CMAKE_DIR=${THIRD_PARTY_DIR}/cmake-${CMAKE_VERSION}
  CMAKE_URL="http://www.cmake.org/files/v${CMAKE_VERSION%.[0-9]}/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz"
  mkdir -p ${CMAKE_DIR} && travis_retry wget --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C ${CMAKE_DIR}
  export PATH=${CMAKE_DIR}/bin:${PATH}

before_script:
- |
  cd ${TRAVIS_BUILD_DIR}
  mkdir build && cd build
  if [[ "${STDLIB}" == "libc++" ]]; then
    cmake .. \
      -DCMAKE_CXX_COMPILER=${CXX_COMPILER} \
      -DCMAKE_CXX_FLAGS="-stdlib=libc++"
  elif [[ "${CODE_COVERAGE}" == "true" ]]; then
    cmake .. \
      -DCMAKE_CXX_COMPILER=${CXX_COMPILER} \
      -DCMAKE_CXX_FLAGS="--coverage" \
      -DCMAKE_EXE_LINKER_FLAGS="--coverage"
  else
    cmake .. \
      -DCMAKE_CXX_COMPILER=${CXX_COMPILER}
  fi

script:
- |
  cmake --build .
  ctest

after_success:
- |
  if [[ "${CODE_COVERAGE}" == "true" ]]; then
    bash <(curl -s https://codecov.io/bash)
  fi

notifications:
  email: false
